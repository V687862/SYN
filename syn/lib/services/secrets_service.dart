import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_remote_config/firebase_remote_config.dart';
import 'package:syn/firebase_options.dart'; // This will be generated by flutterfire_cli

// This FutureProvider will initialize our SecretsService and make it available to the app.
final secretsProvider = FutureProvider<SecretsService>((ref) async {
  final secrets = SecretsService();
  await secrets.initialize();
  return secrets;
});

class SecretsService {
  String? _geminiApiKey;

  String? get geminiApiKey => _geminiApiKey;

  Future<void> initialize() async {
    try {
      // 1. Initialize Firebase
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      
      // 2. Get Remote Config instance
      final remoteConfig = FirebaseRemoteConfig.instance;

      // 3. Set configuration settings
      await remoteConfig.setConfigSettings(RemoteConfigSettings(
        fetchTimeout: const Duration(minutes: 1),
        minimumFetchInterval: const Duration(hours: 1), // Fetch new values hourly
      ));

      // 4. Set default values (important for first run)
      await remoteConfig.setDefaults(const {
        "GEMINI_API_KEY": "",
      });

      // 5. Fetch and activate the configuration
      await remoteConfig.fetchAndActivate();

      // 6. Get the secret value
      _geminiApiKey = remoteConfig.getString('GEMINI_API_KEY');

      if (_geminiApiKey != null && _geminiApiKey!.isNotEmpty) {
        print('Firebase Remote Config: GEMINI_API_KEY loaded successfully.');
      } else {
        throw Exception('Firebase Remote Config: GEMINI_API_KEY is not set or is empty in the Firebase console.');
      }

    } catch (e) {
      print('Error initializing SecretsService with Firebase: $e');
      rethrow;
    }
  }
}
